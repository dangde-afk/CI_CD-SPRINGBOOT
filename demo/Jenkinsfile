pipeline {
    agent any

    environment {
        TOMCAT_USER = 'admin'
        TOMCAT_PASS = '123456'
        TOMCAT_URL  = 'http://localhost:8080/manager/text' // S·ª≠a l·∫°i URL ƒë·ªÉ ƒë√∫ng v·ªõi endpoint deploy c·ªßa Tomcat
        WAR_NAME    = 'demo.war' // Kh·ªõp v·ªõi finalName trong pom.xml
        SITE_NAME   = 'MySpringApp' // T√™n website IIS
        SITE_PATH   = 'C:\\inetpub\\myspringapp' // Th∆∞ m·ª•c web g·ªëc IIS
        IIS_PORT    = '9090' // Port IIS
        PUBLISH_PATH = 'C:\\Program Files\\java technical software\\apache-tomcat-10.1.43\\webapps' // Th∆∞ m·ª•c ch·ª©a WAR ƒë√£ gi·∫£i n√©n
    }

    stages {
        stage('Clone') {
            steps {
                echo 'üîÅ Clone m√£ ngu·ªìn'
                git branch: 'main', url: 'https://github.com/dangde-afk/CI_CD-SPRINGBOOT.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'üîß C√†i ƒë·∫∑t dependencies'
                withMaven(maven: 'Maven', jdk: 'JDK17') {
                    sh 'mvn install'
                }
            }
        }

        stage('Compile Project') {
            steps {
                echo '‚öôÔ∏è Bi√™n d·ªãch project Spring Boot'
                withMaven(maven: 'Maven', jdk: 'JDK17') {
                    sh 'mvn compile'
                }
            }
        }

        stage('Run Tests') {
            steps {
                echo 'üß™ Ch·∫°y unit tests'
                withMaven(maven: 'Maven', jdk: 'JDK17') {
                    sh 'mvn test'
                }
            }
        }

        stage('Package WAR') {
            steps {
                echo 'üì¶ ƒê√≥ng g√≥i project th√†nh file WAR'
                withMaven(maven: 'Maven', jdk: 'JDK17') {
                    sh 'mvn clean package'
                }
            }
        }

        stage('Publish') {
            steps {
                echo 'üìÇ Copy n·ªôi dung WAR sang th∆∞ m·ª•c ch·∫°y'
                bat """
                    if not exist "${PUBLISH_PATH}" mkdir "${PUBLISH_PATH}"
                    powershell Expand-Archive -Path "target\\${WAR_NAME}" -DestinationPath "${PUBLISH_PATH}" -Force
                """
            }
        }

        stage('Deploy to IIS') {
            steps {
                echo 'üåê T·∫°o website IIS (n·∫øu ch∆∞a c√≥)'
                bat """
                    powershell -Command "Import-Module WebAdministration; \
                        if (-Not (Test-Path IIS:\\Sites\\${SITE_NAME})) { \
                            New-Website -Name '${SITE_NAME}' -Port ${IIS_PORT} -PhysicalPath '${PUBLISH_PATH}' -Force \
                        }"
                """
            }
        }

        stage('Deploy to Tomcat') {
            steps {
                echo 'üöÄ Deploy WAR l√™n Tomcat'
                sh """
                    curl -v -u ${TOMCAT_USER}:${TOMCAT_PASS} --upload-file target/${WAR_NAME} \
                    "${TOMCAT_URL}/deploy?path=/demo&update=true"
                """
            }
        }

        stage('Publish to IIS (WAR)') {
            steps {
                echo 'üìÇ Copy n·ªôi dung WAR sang th∆∞ m·ª•c IIS'
                bat """
                    if not exist "${SITE_PATH}" mkdir "${SITE_PATH}"
                    powershell Expand-Archive -Path "target\\${WAR_NAME}" -DestinationPath "${SITE_PATH}" -Force
                """
            }
        }

        stage('Create IIS Website') {
            steps {
                echo 'üåê T·∫°o website IIS ch√≠nh (n·∫øu ch∆∞a c√≥)'
                bat """
                    powershell -Command "Import-Module WebAdministration; \
                        if (-Not (Test-Path IIS:\\Sites\\${SITE_NAME})) { \
                            New-Website -Name '${SITE_NAME}' -Port ${IIS_PORT} -PhysicalPath '${SITE_PATH}' -Force \
                        }"
                """
            }
        }

        stage('Open Website') {
            steps {
                echo 'üåç M·ªü website IIS tr√™n tr√¨nh duy·ªát'
                bat "start http://localhost:${IIS_PORT}"
            }
        }
    }

    post {
        success {
            echo '‚úÖ CI/CD ho√†n t·∫•t cho Spring Boot!'
        }
        failure {
            echo '‚ùå C√≥ l·ªói trong qu√° tr√¨nh CI/CD.'
        }
    }
}